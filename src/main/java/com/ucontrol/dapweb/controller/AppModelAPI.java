package com.ucontrol.dapweb.controller;import com.ucontrol.dapweb.entity.appmodels.Device;import com.ucontrol.dapweb.entity.appmodels.Model;import com.ucontrol.dapweb.entity.appmodels.PlantSystem;import com.ucontrol.dapweb.entity.appmodels.Unit;import com.ucontrol.dapweb.service.TableModelDevaService;import com.ucontrol.dapweb.service.TableModelptDevaService;import com.ucontrol.dapweb.serviceImp.AppModels;import com.ucontrol.dapweb.utils.XmlToObject;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import java.io.File;import java.net.URL;import java.util.ArrayList;import java.util.ListIterator;@RestController@RequestMapping(value = "/api")public class AppModelAPI {    @Resource    private TableModelDevaService modelDevaSrv;    @Resource    private TableModelptDevaService modelptDevaSer;    /**     * 测试阶段导入模型xml     * @return 1     */    @RequestMapping(value = "/deva/import_model", method = RequestMethod.GET)    @ResponseBody    public int importModelDebug(){        URL url = this.getClass().getClassLoader().getResource("model_deva.xml");        //PlantSystem.out.println(url);        File file = new File(url.getPath());        Model model = XmlToObject.xmlToDevA(file);        int res1 =  modelDevaSrv.importModel(model);        int res2 = modelptDevaSer.importModel(model);        return res1+res2;    }    /**     * 前端获取应用模型，设备状态分析（deva）     * @return  model_deva     */    @RequestMapping(value = "/deva/get_model", method = RequestMethod.GET)    @ResponseBody    public Model getModelDeva(){        return AppModels.modelDeva;        //return modelDevaSrv.selectAll();    }    /**     * 前端获取指定id的系统信息     * @param id     * @return PlantSystem     */    @RequestMapping(value = "/deva/get_sysinfo/{id}", method = RequestMethod.GET)    @ResponseBody    public PlantSystem getSystemInfoDeva(@PathVariable("id") int id){        Model model = AppModels.modelDeva;        ArrayList<Unit> units = model.getUnitList();        ListIterator<Unit> unitIte = units.listIterator();        while (unitIte.hasNext()){            ArrayList<PlantSystem> systems = unitIte.next().getSystemList();            ListIterator<PlantSystem> sysIte = systems.listIterator();            while (sysIte.hasNext()){                PlantSystem system = sysIte.next();                int sysId = system.getId();                if(id == sysId){                    return system;                }            }        }        return null;    }    /*@RequestMapping(value = "/getapplist", method = RequestMethod.GET)    @ResponseBody    public ArrayList<Applist> getApplist(){        ArrayList<Applist> applist;        applist = appSrv.getAllApplist();        return applist;    }    @RequestMapping(value = "/getappmodel", method = RequestMethod.GET)    @ResponseBody    public JSONObject getAppModelFromXml(){        URL url = this.getClass().getClassLoader().getResource("model_deva.xml");        //PlantSystem.out.println(url);        File file = new File(url.getPath());        return XmlToJson.loadFromXml(file);    }    @RequestMapping(value="/getmod",  method = RequestMethod.GET)    @ResponseBody    public Model getAppModel(){        URL url = this.getClass().getClassLoader().getResource("model_deva.xml");        //PlantSystem.out.println(url);        File file = new File(url.getPath());        return XmlToObject.xmlToDevA(file);    }*/}